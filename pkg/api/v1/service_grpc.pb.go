// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: api/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EchoAPI_HelloWorld_FullMethodName = "/api.v1.EchoAPI/HelloWorld"
	EchoAPI_WithError_FullMethodName  = "/api.v1.EchoAPI/WithError"
)

// EchoAPIClient is the client API for EchoAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoAPIClient interface {
	HelloWorld(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	WithError(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type echoAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoAPIClient(cc grpc.ClientConnInterface) EchoAPIClient {
	return &echoAPIClient{cc}
}

func (c *echoAPIClient) HelloWorld(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, EchoAPI_HelloWorld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoAPIClient) WithError(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, EchoAPI_WithError_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoAPIServer is the server API for EchoAPI service.
// All implementations should embed UnimplementedEchoAPIServer
// for forward compatibility
type EchoAPIServer interface {
	HelloWorld(context.Context, *EchoRequest) (*EchoResponse, error)
	WithError(context.Context, *EchoRequest) (*EchoResponse, error)
}

// UnimplementedEchoAPIServer should be embedded to have forward compatible implementations.
type UnimplementedEchoAPIServer struct {
}

func (UnimplementedEchoAPIServer) HelloWorld(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedEchoAPIServer) WithError(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithError not implemented")
}

// UnsafeEchoAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoAPIServer will
// result in compilation errors.
type UnsafeEchoAPIServer interface {
	mustEmbedUnimplementedEchoAPIServer()
}

func RegisterEchoAPIServer(s grpc.ServiceRegistrar, srv EchoAPIServer) {
	s.RegisterService(&EchoAPI_ServiceDesc, srv)
}

func _EchoAPI_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoAPIServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoAPI_HelloWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoAPIServer).HelloWorld(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoAPI_WithError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoAPIServer).WithError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoAPI_WithError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoAPIServer).WithError(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EchoAPI_ServiceDesc is the grpc.ServiceDesc for EchoAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.EchoAPI",
	HandlerType: (*EchoAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _EchoAPI_HelloWorld_Handler,
		},
		{
			MethodName: "WithError",
			Handler:    _EchoAPI_WithError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/service.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: api/web/v1/web.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	YourService_Echo_FullMethodName       = "/your.service.v1.YourService/Echo"
	YourService_EchoStream_FullMethodName = "/your.service.v1.YourService/EchoStream"
)

// YourServiceClient is the client API for YourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YourServiceClient interface {
	Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
	EchoStream(ctx context.Context, opts ...grpc.CallOption) (YourService_EchoStreamClient, error)
}

type yourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYourServiceClient(cc grpc.ClientConnInterface) YourServiceClient {
	return &yourServiceClient{cc}
}

func (c *yourServiceClient) Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, YourService_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourServiceClient) EchoStream(ctx context.Context, opts ...grpc.CallOption) (YourService_EchoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &YourService_ServiceDesc.Streams[0], YourService_EchoStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &yourServiceEchoStreamClient{stream}
	return x, nil
}

type YourService_EchoStreamClient interface {
	Send(*StringMessage) error
	Recv() (*StringMessage, error)
	grpc.ClientStream
}

type yourServiceEchoStreamClient struct {
	grpc.ClientStream
}

func (x *yourServiceEchoStreamClient) Send(m *StringMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *yourServiceEchoStreamClient) Recv() (*StringMessage, error) {
	m := new(StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YourServiceServer is the server API for YourService service.
// All implementations should embed UnimplementedYourServiceServer
// for forward compatibility
type YourServiceServer interface {
	Echo(context.Context, *StringMessage) (*StringMessage, error)
	EchoStream(YourService_EchoStreamServer) error
}

// UnimplementedYourServiceServer should be embedded to have forward compatible implementations.
type UnimplementedYourServiceServer struct {
}

func (UnimplementedYourServiceServer) Echo(context.Context, *StringMessage) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedYourServiceServer) EchoStream(YourService_EchoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoStream not implemented")
}

// UnsafeYourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YourServiceServer will
// result in compilation errors.
type UnsafeYourServiceServer interface {
	mustEmbedUnimplementedYourServiceServer()
}

func RegisterYourServiceServer(s grpc.ServiceRegistrar, srv YourServiceServer) {
	s.RegisterService(&YourService_ServiceDesc, srv)
}

func _YourService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YourService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourServiceServer).Echo(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourService_EchoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YourServiceServer).EchoStream(&yourServiceEchoStreamServer{stream})
}

type YourService_EchoStreamServer interface {
	Send(*StringMessage) error
	Recv() (*StringMessage, error)
	grpc.ServerStream
}

type yourServiceEchoStreamServer struct {
	grpc.ServerStream
}

func (x *yourServiceEchoStreamServer) Send(m *StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yourServiceEchoStreamServer) Recv() (*StringMessage, error) {
	m := new(StringMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YourService_ServiceDesc is the grpc.ServiceDesc for YourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "your.service.v1.YourService",
	HandlerType: (*YourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _YourService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoStream",
			Handler:       _YourService_EchoStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/web/v1/web.proto",
}

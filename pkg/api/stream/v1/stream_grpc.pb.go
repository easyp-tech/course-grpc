// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: api/stream/v1/stream.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EchoService_EchoClientStream_FullMethodName             = "/api.stream.v1.EchoService/EchoClientStream"
	EchoService_EchoServerStream_FullMethodName             = "/api.stream.v1.EchoService/EchoServerStream"
	EchoService_EchoBidirectionalStreamSync_FullMethodName  = "/api.stream.v1.EchoService/EchoBidirectionalStreamSync"
	EchoService_EchoBidirectionalStreamAsync_FullMethodName = "/api.stream.v1.EchoService/EchoBidirectionalStreamAsync"
)

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (EchoService_EchoClientStreamClient, error)
	EchoServerStream(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoService_EchoServerStreamClient, error)
	EchoBidirectionalStreamSync(ctx context.Context, opts ...grpc.CallOption) (EchoService_EchoBidirectionalStreamSyncClient, error)
	EchoBidirectionalStreamAsync(ctx context.Context, opts ...grpc.CallOption) (EchoService_EchoBidirectionalStreamAsyncClient, error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (EchoService_EchoClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], EchoService_EchoClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceEchoClientStreamClient{stream}
	return x, nil
}

type EchoService_EchoClientStreamClient interface {
	Send(*EchoRequest) error
	CloseAndRecv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceEchoClientStreamClient struct {
	grpc.ClientStream
}

func (x *echoServiceEchoClientStreamClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceEchoClientStreamClient) CloseAndRecv() (*EchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) EchoServerStream(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoService_EchoServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[1], EchoService_EchoServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceEchoServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_EchoServerStreamClient interface {
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceEchoServerStreamClient struct {
	grpc.ClientStream
}

func (x *echoServiceEchoServerStreamClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) EchoBidirectionalStreamSync(ctx context.Context, opts ...grpc.CallOption) (EchoService_EchoBidirectionalStreamSyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[2], EchoService_EchoBidirectionalStreamSync_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceEchoBidirectionalStreamSyncClient{stream}
	return x, nil
}

type EchoService_EchoBidirectionalStreamSyncClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceEchoBidirectionalStreamSyncClient struct {
	grpc.ClientStream
}

func (x *echoServiceEchoBidirectionalStreamSyncClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceEchoBidirectionalStreamSyncClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) EchoBidirectionalStreamAsync(ctx context.Context, opts ...grpc.CallOption) (EchoService_EchoBidirectionalStreamAsyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[3], EchoService_EchoBidirectionalStreamAsync_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceEchoBidirectionalStreamAsyncClient{stream}
	return x, nil
}

type EchoService_EchoBidirectionalStreamAsyncClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceEchoBidirectionalStreamAsyncClient struct {
	grpc.ClientStream
}

func (x *echoServiceEchoBidirectionalStreamAsyncClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceEchoBidirectionalStreamAsyncClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
// All implementations should embed UnimplementedEchoServiceServer
// for forward compatibility
type EchoServiceServer interface {
	EchoClientStream(EchoService_EchoClientStreamServer) error
	EchoServerStream(*EchoRequest, EchoService_EchoServerStreamServer) error
	EchoBidirectionalStreamSync(EchoService_EchoBidirectionalStreamSyncServer) error
	EchoBidirectionalStreamAsync(EchoService_EchoBidirectionalStreamAsyncServer) error
}

// UnimplementedEchoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (UnimplementedEchoServiceServer) EchoClientStream(EchoService_EchoClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoClientStream not implemented")
}
func (UnimplementedEchoServiceServer) EchoServerStream(*EchoRequest, EchoService_EchoServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoServerStream not implemented")
}
func (UnimplementedEchoServiceServer) EchoBidirectionalStreamSync(EchoService_EchoBidirectionalStreamSyncServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoBidirectionalStreamSync not implemented")
}
func (UnimplementedEchoServiceServer) EchoBidirectionalStreamAsync(EchoService_EchoBidirectionalStreamAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoBidirectionalStreamAsync not implemented")
}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_EchoClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).EchoClientStream(&echoServiceEchoClientStreamServer{stream})
}

type EchoService_EchoClientStreamServer interface {
	SendAndClose(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceEchoClientStreamServer struct {
	grpc.ServerStream
}

func (x *echoServiceEchoClientStreamServer) SendAndClose(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceEchoClientStreamServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_EchoServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).EchoServerStream(m, &echoServiceEchoServerStreamServer{stream})
}

type EchoService_EchoServerStreamServer interface {
	Send(*EchoResponse) error
	grpc.ServerStream
}

type echoServiceEchoServerStreamServer struct {
	grpc.ServerStream
}

func (x *echoServiceEchoServerStreamServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoService_EchoBidirectionalStreamSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).EchoBidirectionalStreamSync(&echoServiceEchoBidirectionalStreamSyncServer{stream})
}

type EchoService_EchoBidirectionalStreamSyncServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceEchoBidirectionalStreamSyncServer struct {
	grpc.ServerStream
}

func (x *echoServiceEchoBidirectionalStreamSyncServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceEchoBidirectionalStreamSyncServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_EchoBidirectionalStreamAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).EchoBidirectionalStreamAsync(&echoServiceEchoBidirectionalStreamAsyncServer{stream})
}

type EchoService_EchoBidirectionalStreamAsyncServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceEchoBidirectionalStreamAsyncServer struct {
	grpc.ServerStream
}

func (x *echoServiceEchoBidirectionalStreamAsyncServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceEchoBidirectionalStreamAsyncServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.stream.v1.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoClientStream",
			Handler:       _EchoService_EchoClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EchoServerStream",
			Handler:       _EchoService_EchoServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EchoBidirectionalStreamSync",
			Handler:       _EchoService_EchoBidirectionalStreamSync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EchoBidirectionalStreamAsync",
			Handler:       _EchoService_EchoBidirectionalStreamAsync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/stream/v1/stream.proto",
}

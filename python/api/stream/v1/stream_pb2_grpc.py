# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api.stream.v1 import stream_pb2 as api_dot_stream_dot_v1_dot_stream__pb2


class EchoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EchoClientStream = channel.stream_unary(
                '/api.stream.v1.EchoService/EchoClientStream',
                request_serializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.SerializeToString,
                response_deserializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.FromString,
                )
        self.EchoServerStream = channel.unary_stream(
                '/api.stream.v1.EchoService/EchoServerStream',
                request_serializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.SerializeToString,
                response_deserializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.FromString,
                )
        self.EchoBidirectionalStreamSync = channel.stream_stream(
                '/api.stream.v1.EchoService/EchoBidirectionalStreamSync',
                request_serializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.SerializeToString,
                response_deserializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.FromString,
                )
        self.EchoBidirectionalStreamAsync = channel.stream_stream(
                '/api.stream.v1.EchoService/EchoBidirectionalStreamAsync',
                request_serializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.SerializeToString,
                response_deserializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.FromString,
                )


class EchoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EchoClientStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoServerStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoBidirectionalStreamSync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoBidirectionalStreamAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EchoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EchoClientStream': grpc.stream_unary_rpc_method_handler(
                    servicer.EchoClientStream,
                    request_deserializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.FromString,
                    response_serializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.SerializeToString,
            ),
            'EchoServerStream': grpc.unary_stream_rpc_method_handler(
                    servicer.EchoServerStream,
                    request_deserializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.FromString,
                    response_serializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.SerializeToString,
            ),
            'EchoBidirectionalStreamSync': grpc.stream_stream_rpc_method_handler(
                    servicer.EchoBidirectionalStreamSync,
                    request_deserializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.FromString,
                    response_serializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.SerializeToString,
            ),
            'EchoBidirectionalStreamAsync': grpc.stream_stream_rpc_method_handler(
                    servicer.EchoBidirectionalStreamAsync,
                    request_deserializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.FromString,
                    response_serializer=api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.stream.v1.EchoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EchoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EchoClientStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request, target, '/api.stream.v1.EchoService/EchoClientStream',
            api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.SerializeToString,
            api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EchoServerStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.stream.v1.EchoService/EchoServerStream',
            api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.SerializeToString,
            api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EchoBidirectionalStreamSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request, target, '/api.stream.v1.EchoService/EchoBidirectionalStreamSync',
            api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.SerializeToString,
            api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EchoBidirectionalStreamAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request, target, '/api.stream.v1.EchoService/EchoBidirectionalStreamAsync',
            api_dot_stream_dot_v1_dot_stream__pb2.EchoRequest.SerializeToString,
            api_dot_stream_dot_v1_dot_stream__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

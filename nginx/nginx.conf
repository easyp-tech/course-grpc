events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Upstream for main gRPC server (port 5001)
    upstream grpc_backend {
        server grpc-server-1:5001;
        server grpc-server-2:5001;
        keepalive 32;
    }

    # Upstream for stream gRPC server (port 8080)
    upstream stream_backend {
        server stream-server-1:8080;
        server stream-server-2:8080;
        keepalive 32;
    }

    # Main gRPC server proxy
    server {
        listen 5001 http2;
        server_name _;

        location / {
            grpc_pass grpc://grpc_backend;
            grpc_set_header Host $host;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            grpc_set_header X-Forwarded-Proto $scheme;

            # gRPC specific settings
            grpc_connect_timeout 60s;
            grpc_send_timeout 60s;
            grpc_read_timeout 60s;

            # Error handling
            error_page 502 = /error502grpc;
            error_page 503 = /error503grpc;
            error_page 504 = /error504grpc;
        }

        # Error pages for gRPC
        location = /error502grpc {
            internal;
            add_header grpc-status 14;
            add_header grpc-message "unavailable";
            return 204;
        }

        location = /error503grpc {
            internal;
            add_header grpc-status 14;
            add_header grpc-message "unavailable";
            return 204;
        }

        location = /error504grpc {
            internal;
            add_header grpc-status 4;
            add_header grpc-message "deadline exceeded";
            return 204;
        }
    }

    # Stream gRPC server proxy
    server {
        listen 8080 http2;
        server_name _;

        location / {
            grpc_pass grpc://stream_backend;
            grpc_set_header Host $host;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            grpc_set_header X-Forwarded-Proto $scheme;

            # gRPC specific settings
            grpc_connect_timeout 60s;
            grpc_send_timeout 60s;
            grpc_read_timeout 60s;

            # Streaming specific settings
            proxy_buffering off;
            proxy_request_buffering off;

            # Error handling
            error_page 502 = /error502grpc;
            error_page 503 = /error503grpc;
            error_page 504 = /error504grpc;
        }

        # Error pages for gRPC
        location = /error502grpc {
            internal;
            add_header grpc-status 14;
            add_header grpc-message "unavailable";
            return 204;
        }

        location = /error503grpc {
            internal;
            add_header grpc-status 14;
            add_header grpc-message "unavailable";
            return 204;
        }

        location = /error504grpc {
            internal;
            add_header grpc-status 4;
            add_header grpc-message "deadline exceeded";
            return 204;
        }
    }

    # Health check endpoint
    server {
        listen 80;
        server_name _;

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
